import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat

buildscript {
    ext {
        lombokVersion = '1.18.12'
        cucumberVersion = '6.1.2'
        springBootVersion = '2.2.5.RELEASE'
    }
}

plugins {
    id 'java'
    id 'jacoco'
	id 'org.springframework.boot' version "${springBootVersion}"
    id 'com.github.sherter.google-java-format' version '0.9'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.sherter.google-java-format'

googleJavaFormat {
  toolVersion = "1.7"
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.mikesamuel:json-sanitizer:1.0'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation "io.cucumber:cucumber-java:${cucumberVersion}"
    implementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}"
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.1.RELEASE'

    runtimeOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"

    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
}

group = 'com.microbank'
version = '0.1.0'
description = 'microbank-customer-service'
sourceCompatibility = '1.8'

springBoot {
	mainClassName = 'com.microbank.customer.Application'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Fail if Javadoc warnings are present.
tasks.withType(Javadoc) {
	options.addStringOption('Xwerror', '-quiet')
}

task verifyFormatting(type: VerifyGoogleJavaFormat) {
  source 'src/main'
  source 'src/test'
  source 'src/integration'
  include '**/*.java'
}

task format(type: GoogleJavaFormat) {
  source 'src/main'
  source 'src/test'
  source 'src/integration'
  include '**/*.java'
  finalizedBy verifyFormatting
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco/jacocoHtml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
            exclude:    ['**/model/**',
                        '**/exception/**',
                        '**/*Application*'])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

compileJava {
    finalizedBy javadoc, format
}

check {
    dependsOn jacocoTestCoverageVerification
}

test {
	useJUnitPlatform()
    finalizedBy jacocoTestReport
}

sourceSets {
    intTest {
        java {
            srcDir 'src/integration/java'
        }
        resources {
            srcDir 'src/integration/resources'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

task intTest(type: Test) {
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}